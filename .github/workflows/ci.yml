name: build-and-lint

# triggers: define when this workflow should run
on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  build-and-lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install backend dependencies
        working-directory: server
        run: npm ci

      - name: Lint backend
        working-directory: server
        run: npm run lint -- --max-warnings=5

      - name: Install frontend dependencies
        working-directory: Ecommerce2.0
        run: npm ci

      - name: Lint frontend
        working-directory: Ecommerce2.0
        run: npm run lint -- --max-warnings=5

      - name: Build backend image
        run: docker build -t backend ./server

      - name: Build frontend image
        run: docker build -t frontend ./Ecommerce2.0

  deploy:
    needs: build-and-lint
    if: github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug env + prepare known_hosts
        run: |
          set -x                                   # echo commands
          echo "EC2_HOST: $EC2_HOST"               # show host
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          # verbose keyscan to see what happens
          ssh-keyscan -v -H "$EC2_HOST" >> ~/.ssh/known_hosts 2>&1 || {
            echo "ssh-keyscan failed!" >&2
            cat ~/.ssh/known_hosts
            exit 1
          }
          echo "Known hosts file now:"
          cat ~/.ssh/known_hosts
        env:
          EC2_HOST: '13.48.104.73'

      - name: Write SSH key
        run: |
          set -x
          echo "${EC2_KEY}" > ec2_key.pem
          chmod 600 ec2_key.pem
          ls -l ec2_key.pem
        env:
          EC2_KEY: ${{ secrets.EC2_KEY }}

      - name: Deploy on EC2 (git pull + docker compose up -d --build)
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_APP_DIR: ${{ secrets.EC2_APP_DIR }}
        run: |
          set -x   # trace commands in CI
          echo "Connecting to $EC2_USER@$EC2_HOST"
          ssh -vvv -i ec2_key.pem ${EC2_USER}@${EC2_HOST} << 'EOF'
            set -ex  # trace + exit on error inside EC2
            echo "Inside EC2, at $(pwd)"
            cd "${EC2_APP_DIR}"

            git fetch --all
            git reset --hard origin/main

            docker compose up -d --build

            docker image prune -f

            docker compose ps
          EOF
